// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Css from "bs-css-emotion/lib/es6/src/Css.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Button$YourProjectName from "./components/Button/Button.bs.js";
import * as Reducer$YourProjectName from "./Reducer.bs.js";
import * as Background$YourProjectName from "./components/Background/Background.bs.js";

function getTimeToDisplay(state) {
  return Belt_Array.reduce(state.times, 0, (function (acc, timesTuple) {
                return acc + (timesTuple[1] - timesTuple[0]);
              })) / 1000;
}

function padStringWithEndingZeros(str) {
  var split = str.split(".");
  var bigNumber = Belt_Array.get(split, 0);
  var smallNumber = Belt_Array.get(split, 1);
  if (bigNumber !== undefined) {
    if (smallNumber !== undefined) {
      if (smallNumber.length === 2) {
        return bigNumber + ("." + (smallNumber + "0"));
      } else if (smallNumber.length === 1) {
        return bigNumber + ("." + (smallNumber + "00"));
      } else if (smallNumber.length === 0) {
        return bigNumber + ".000";
      } else {
        return str;
      }
    } else if (bigNumber === "0") {
      return "0.000";
    } else {
      return str;
    }
  } else {
    return str;
  }
}

function getCurrentDateValue(param) {
  return new Date().valueOf();
}

function App(Props) {
  var match = React.useReducer(Reducer$YourProjectName.reducer, {
        times: [],
        isRunning: false
      });
  var dispatch = match[1];
  var state = match[0];
  React.useEffect((function () {
          if (!state.isRunning) {
            return ;
          }
          var interval = setInterval((function (param) {
                  return Curry._1(dispatch, {
                              TAG: /* Tick */2,
                              _0: new Date().valueOf()
                            });
                }), 10);
          return (function (param) {
                    clearInterval(interval);
                    
                  });
        }), [state.isRunning]);
  return React.createElement(Background$YourProjectName.make, {
              children: null
            }, React.createElement("h1", undefined, padStringWithEndingZeros(getTimeToDisplay(state).toString()) + " seconds"), React.createElement("div", {
                  className: Curry._1(Css.style, {
                        hd: Css.display("flex"),
                        tl: {
                          hd: Css.flexDirection("row"),
                          tl: /* [] */0
                        }
                      })
                }, React.createElement(Button$YourProjectName.make, {
                      children: "Start",
                      onClick: (function (param) {
                          return Curry._1(dispatch, {
                                      TAG: /* Start */0,
                                      _0: new Date().valueOf()
                                    });
                        }),
                      disabled: state.isRunning
                    }), React.createElement(Button$YourProjectName.make, {
                      children: "Pause",
                      onClick: (function (param) {
                          return Curry._1(dispatch, {
                                      TAG: /* Pause */1,
                                      _0: new Date().valueOf()
                                    });
                        }),
                      disabled: !state.isRunning
                    }), React.createElement(Button$YourProjectName.make, {
                      children: "Reset",
                      onClick: (function (param) {
                          return Curry._1(dispatch, /* Reset */0);
                        }),
                      disabled: state.isRunning
                    })));
}

var make = App;

export {
  getTimeToDisplay ,
  padStringWithEndingZeros ,
  getCurrentDateValue ,
  make ,
  
}
/* Css Not a pure module */
